@using Ineventation.WebApp.Enums;

@model Ineventation.WebApp.ViewModels.CreateEventView

@{
    ViewBag.Title = "CreateEvent";
    if (Model.AccountType == "promoter")
    {
        Layout = "~/Views/Shared/SignedIn.cshtml";
    }
    else if (Model.AccountType == "visitor")
    {
        Layout = "~/Views/Shared/_Visitor.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Admin.cshtml";
    }

}

@if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-success">
            <strong> Success </strong> @ViewBag.Message
        </div>
    }
}
else
{
    <div class="body-content align-items-center">


            <div class="col-lg-5 mx-auto">
                @using (Html.BeginForm("AddEvent", "Event", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.Hidden("MyId", Model.MyId)

                    @Html.AntiForgeryToken()

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group" style="margin:30px;">
                        @Html.LabelFor(model => model.Caption, htmlAttributes: new { @class = "col-form-label text-color" })
                        @Html.EditorFor(model => model.Caption, new { htmlAttributes = new { @class = "form-control", @id = "Caption", @placeholder = "Add caption" } })
                        @Html.ValidationMessageFor(model => model.Caption, "", new { @class = "text-danger" })

                    </div>
                    <div class="form-group" style="margin:30px;">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-form-label text-color" })
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @id = "Description", @placeholder = "Description" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group" style="margin:30px;">
                        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "col-form-label text-color" })
                        @Html.DropDownListFor(model => model.Type, new SelectList(Model.Categories), "Select event type",
                        new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group" style="margin:30px;">
                        @Html.LabelFor(model => model.DateAndTime, htmlAttributes: new { @class = "col-form-label text-color" })

                        <div class="flexContainer">
                            <input type="text" class="form-control inputField" id="DateAndTime" name="DateAndTime" value="Select date" />
                            <button class="btn picker1"> SHOW </button>
                        </div>

                        @Html.ValidationMessageFor(model => model.DateAndTime, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group" style="margin:30px;">
                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "col-form-label text-color" })
                        @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control", @id = "Location", @placeholder = "Location" } })
                        @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    </div>


                    <div class="form-group"  style="margin:30px;">
                        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "col-form-label text-color" })
                        @Html.DropDownListFor(model => model.City, new SelectList(Enum.GetValues(typeof(Cities))), "Select city",
                        new { @class = "form-control" })
                    </div>

                    <div class="form-group" style="margin:30px;">
                        <div id="map" style="width:100%; height:300px;"></div>
                        @Html.HiddenFor(model=>model.lat, htmlAttributes: new { @id = "lat"})
                        @Html.HiddenFor(model => model.lng, htmlAttributes: new { @id = "lng" })


                    </div>

                    <div class="form-group" style="margin:30px;">
                        <label for="exampleInputFile">Choose photo:</label>
                        <input type="file" class="form-control-file" id="Image" name="Image" aria-describedby="fileHelp">
                        <small id="fileHelp" class="form-text text-muted">Choose which photo you want to be displayed with this event.</small>
                    </div>

                    <div class="form-group"  style="margin:30px;">
                        <div class="row justify-content-center">
                            <button type="submit" id="btncreate" value="Create" class="btn btn-primary">Create</button>
                        </div>
                    </div>
                }




        </div>

        @if (ViewBag.Message != null)
        {
            <div class="alert alert-danger">
                <strong> Error </strong> @ViewBag.Message
            </div>
        }
    </div>
}





@section Scripts {
    @Scripts.Render("~/bundles/signalr")
    @Scripts.Render("~/bundles/nav")
    @Scripts.Render("~/bundles/maps")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/datepicker")
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBzDvV8lc4g4XVi8xPZHzCsZ4jfjUUONVU&callback=initMap"
        type="text/javascript"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

}

